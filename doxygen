1.文件信息
@file 文件名(遵守文件命名规则) --> 文件声明，即当前文件名
@author 作者名 --> 作者
@version 版本号 --> 版本号
@todo 说明文字 --> TODO 列表，在相关页面有它专门一项
注:只能在实现文件(.c/.cpp)中使用，如果相同函数的实现文件与头文件中均有，生成的文档中会有重复项，可以理解为调用者不应知道实现流程
@date 日期时间 --> 说明文件生成的日期时间
@section 章节标题 --> @section LICENSE 版权许可 @section DESCRIPTION 描述

2.模块信息
@defgroup 模块名(英文) 显示名(中文) @{ 类/函数/变量/宏/... @}--> 定义模块
@ingroup 模块名(英文) [显示名(中文)]--> 作为指定名的模块的子模块,显示名为可选项,可与指定名的模块的显示名不同
@addtogroup 模块名(英文) [显示名(中文)] --> 作为指定名的模块的成员,显示名为可选项,必需与指定名的模块的显示名相同
@name 显示名(中文) @{ 变量/宏 @} --> 按用途分,以便理解全局变量/宏的用途
这部分推荐参考： doxygen使用总结

3.函数信息
@param 参数名 说明文字 --> 不建议使用这个
@param[in] 参数名 说明文字 --> 输入参数
@param[out] 参数名 说明文字 --> 输出参数
@param[in,out] 参数名 说明文字 --> 即输入又输出参数
@exception 用来说明异常类及抛出条件
@remark 表示评论，暴露给客户程序员的文档
@return 说明文字 --> 返回值说明
@retval 说明文字 --> 特定返回值说明
@note 说明文字 --> 注解,可以描述工作流程和注意事项
@par [段落标题] --> 开创新段落,一般与示例代码联用
@code --> 示例代码开始
@endcode --> 示例代码结束
@see 类/函数/变量/文件/URL --> 参见,
　 类名::函数名 或 ::函数名 可以变成超链接点击跳转到对应函数说明处
　 函数重载的情况下,要带上参数列表以及返回值
@deprecated 说明文字 --> 过时列表,在相关页面有它专门一项
　 注:只能在头文件(*.h)中使用,如果相同函数的实现文件与头文件中均有,
　 　 生成的文档中会有重复项,可以理解为维护者不关心这个接口是不是要过时
@pre 说明文字 --> 前置条件
@arg 参数/返回值 说明文字 --> 以列表形式说明参数取值意义
注:也可以用 - 或 -# 来代替,建议此种方法,简单明了
　- 第一级
　　- 第二级
　　　- 第三级
　　即相同开头的-或 -#第二行比第一行缩进一个英文空格就变了第二级,依次类推
　　- 开头的第一级为实心黑圆点;第二级为空心黑圆点;第三级以后为实心方块;
　　-#开头的第一级为数字(1./2./3./...),
　　第二级为小写字母(a./b./c./...),
　　第三级为罗马数字(i./ii./iii./...),
　　第四级为大写字母(A./B./C./...)

4.提醒信息
@brief 说明文字 --> 摘要,即当前文件/函数说明
@attention 说明文字 --> 注意
@bug 说明文字 --> 问题
@warning 说明文字 --> 警告
@ref 引用其他标记，类似于html中的锚　
@since {text} 通常用来说明从什么版本、时间写此部分代码
@relates 通常用做把非成员函数的注释文档包含在类的说明文档中
@def 宏定义说明
@fn 函数 函数说明
@test 测试示例、信息
(@bug、@test以及@todo等会出现链接页面)


使用样例：
1.  文档说明
/**
  * \file    	文件名
  * \author  	作者
  * \version 	版本
  * \date    	日期
  * \brief   	这里是文件简介，简介以空行（前面可以有空格开头，然后跟有若干个星号，这些将被忽略）结束。
  *          	    - 	功能1（-开头为无序号列表项）
  *          	    + 	功能2（+开头为无序号列表项）
  *          	    -# 	功能3（-#开头为自动序号列表项）
  *          	    5. 	功能4（数字.开头为有序号列表项，该数字并不代表实际显示序号）
  *
  * \details	这里是文件的详细描述。
  *
    \verbatim
        这里也是文件的详细描述，为了避免文本中有某些字符串与Doxygen中命令或特殊字符冲突，
        这里使用 \verbatim 命令对，以忽略其中的Doxygen命令。
    \endverbatim    
  *
  *	\deprecated	这里是弃用描述，这会导致创建一个弃用列表，列出所有的弃用描述（可选）
  *	\warning	这里是警告信息（可选）
  *	\attention	这里是注意事项（可选）
  *	\copyright	这里是版权信息（可选）
  *	\remark		这里是备注信息（可选）
  */


2.   函数说明
/**
  * \brief  这里是函数简介
  * \note   这里是注解，可以描述一些约束条件，或函数执行后的状态等
  *            - 状态1
  *            - 状态2
  *
  * \param[in]  	参数名(或None)  参数说明: 参数方向可以是[in]、[out]或[in,out]
  * \param[out]  	参数名(或None)  参数说明:
  * 					\arg 可能的参数值1: 参数值1说明
  * 					\arg 可能的参数值2: 参数值2说明
  * \retval	返回值说明(或None) 
  * 			- 可能的返回值1: 返回值1说明
  * 			- 可能的返回值2: 返回值2说明
  */


3.  枚举说明
/** 
  * @brief  这里是枚举描述
  */   
typedef enum { 
	IDENTIFIER1   = 0x00,	/*!< 标识符1描述 */
	IDENTIFIER2			  	/*!< 标识符2描述 */
}eTypeName;


4.  结构体说明
/** 
  * @brief   这里是结构体描述
  */ 
typedef struct {
    Type_t member1;		/*!< 这里是成员1描述。 参数的值可以是 \ref 分组 中的值，
                            可以将可取值的集合添加到一个分组，方便查看。 */                                   
    Type_t member2;       /*!< 这里是成员2描述。 参数的值可以是 \ref 分组 中的值，
                            每个分组将会显示在单独的页面上，可用 \\ref 命令创建引用链接*/   
}StructTypeName_t;


5.   定义分组
/** \defgroup 分组名
  * \brief    这里是分组简介
  * \details  这里是详细描述
  * @{
  */ 

    /* 这里放置分组内容。
        应该为整个项目定义一个分组;
        应该为每个模块定义一个分组;
        应该为每个文件定义一个分组;
        应该为每组函数定义一个分组;
        应该为每组可选值定义一个分组;
        应该为相关联的一组集合定义一个分组;
    */
    #define IDENTIFIER1           (value1)
    #define IDENTIFIER2           (value2)

/**
  * @}
  */ 


6.   添加到分组

/** @addtogroup 分组名
  * @{
  */ 

	/* 将内容添加到已有分组 */

/**
  * @}
  */ 


7.   宏说明
/*!	\def MAX(x,y)
 *	方式1：这里是 MAX(x,y) 宏的记录，这个注释块可以放在文档的其他位置
 */

/*!	方式2：这里是 MAX(x,y) 宏的记录，这个注释块必须放在宏的前面 */
#define MAX(x,y) ((x)>(y)?(x):(y))	/*!< 方式3：这里是 MAX(x,y) 宏的记录，这个注释块必须放在宏的后面 */
